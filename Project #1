//© Sofia 2020
//Programmet hittar nya primtal genom att kontrollera delbarheten mot alla lägre, redan hittade, primtal. 
//"Hur då?":
//När den hittar ett nytt primtal, lägger den till detta i en array (i arrayen lagras alla primtal vi hittar)
//Det är denna lista "vi" (programmet) kontrollerar delbarheten mot
//Detta fungerar eftersom alla sammansatta tal kan skrivas som en produkt av primtal (därför räcker det med att kontrollera delbarheten mot andra primtal)
//Uppgiften var att hitta primtal från 1-100, men programmet kan lätt anpassas för att hitta primtal högre än detta, genom att modifiera den första for-loopen till
//att fortsätta fler än 100 gånger till önskat antal gånger.

<script src="https://koda.nu/simple.js"> 

var primtal = [2];  //Array som lagrar de primtal vi hittar; det lägsta primtalet 2 lagrar vi från början eftersom vi måste ha minst ett primtal att kunna kolla delbarhet mot
var isPrime = true;   //Bool för att undersöka om ett tal är primtal eller inte längre ned i programmet.
  
function start()
{
	//Kollar varje integer från och med 3 till och med 100 om det är ett primtal 
	for (var n = 3; n <= 100; n++)	
	{      
		//Undersök om detta är ett primtal
		isPrime = true;
      
		//Denna for-loop returnerar false om talet är delbart med något tidigare primtal (då är det inte ett primtal) 
		//(Notera att alla sammansatta tal kan primtalsfaktoriseras, därmed behöver vi bara kontrollera delbarheten mot tidigare primtal - ej mot alla tidigare sammansatta tal som finns)
		for (var i = 0; i < primtal.length; i++)
		{
			if ( n % primtal[i] == 0 )  // Om mod(n) av talet är 0, så är det delbart med ett av de tidigare talen <=> då är det inte ett primtal. 
			{
				isPrime = false;
			}
		}
		
		// Om det var ett primtal (alltså om det gick igenom primtalschecken ovan), läggs det till i arrayen med befintliga primtal
		if (isPrime)
		{
			primtal.push(n);
		}
	}
	
	alert(primtal.join('\n')) //Skriver ut listan med alla hittade primtal i slutet
}
</script>
