<script src="https://koda.nu/simple.js"> 

/* Programmet hittar nya primtal genom att kontrollera delbarheten mot alla lägre redan hittade primtal, fram till roten av talet du söker. 
När den hittar nya primtal, lägger den till detta i en array (i arrayen lagras alla primtal vi hittar)
Den ger även exekveringstiden för att göra detta.
Uppgiften var att hitta primtal från 1-100, men programmet kan hitta primtal högre än detta genom att modifiera värdet på findPrimesUpTo */
//© Sofia 2020


//Konfig
var findPrimesUpTo = 100;
var primenumbers = [2];  		
  
function start()
{
  	var t0 = new Date().getTime();
	
	//Undersöker vilka tal som är primtal 
	for (var n = 3; n <= findPrimesUpTo; n++)	
	{      
		isPrime = true;
      
		//Om talet är delbart med något tidigare primtal är det inte ett primtal
		for (var i = 0; i < sqrt(primenumbers.length); i++)
		{
			// Om n mod(primenumbers[i], dvs något tidigare primtal) med talet är 0, så är det delbart med ett lägre primtal
			if (n % primenumbers[i] === 0 )  
			{
				isPrime = false;
			}
		}
		
		//Om det var ett primtal läggs det till i listan med befintliga primtal
		if (isPrime)
		{
			primenumbers.push(n);
		}
	}
	
	//Skriver ut listan med alla hittade primtal i slutet och exekveringstiden i s
  	var timeDeltaTime = new Date().getTime() - t0;
  	alert("Execution time is: " + timeDeltaTime/1000 + " s");
	alert(primenumbers); 

}
</script>
